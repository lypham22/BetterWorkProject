@model BW.Data.Contract.DTOViews.UserView

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm(null, null, FormMethod.Post, new { @name = "myForm", @ng_app = "validateUser" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>User</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.UserId)

        <div class="form-group" ng-controller="validUsernameCtrl">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" ng-controller="validUsernameCtrl">
                @*@Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @ng_model = "UserName", @ng_required = "true", @ng_minlength = "6", @ng_maxlength = "12", @ng_pattern = "regexp" } })*@
                @*<span style="color:red" ng-show="myForm.UserName.$dirty && myForm.UserName.$invalid">
                    <span ng-show="myForm.UserName.$error.required">Name is required.</span>
                    <span ng-show="myForm.UserName.$error.minlength">Username must from 6 to 12 word.</span>
                    <span ng-show="myForm.UserName.$error.pattern">Username must not contain special character.</span>
                </span>*@
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control"} })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" ng-disabled="!myForm.$valid" />
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/angular.min.js"></script>
<script src="~/Scripts/controller.js"></script>